# -*- coding: utf-8 -*-
import calendar
import logging
from datetime import datetime, date, timedelta

from odoo import models, api, fields, _
from odoo.exceptions import UserError, ValidationError

_logger = logging.getLogger(__name__)

# Mappage des noms de mois en anglais (standard Python) vers des cl√©s de s√©lection stables (fran√ßais/minuscules)
MONTH_KEYS_MAP = {
    'january': 'janvier', 'february': 'fevrier', 'march': 'mars', 'april': 'avril',
    'may': 'mai', 'june': 'juin', 'july': 'juillet', 'august': 'aout',
    'september': 'septembre', 'october': 'octobre', 'november': 'novembre', 'december': 'decembre'
}


class WorkProgram(models.Model):
    _name = 'work.program'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _description = 'Programme de travail'

    user_id = fields.Many2one('res.users', default=lambda self: self.env.user, string='Utilisateur Associ√©')

    # Remplacement du champ 'status' par 'state' pour le workflow
    state = fields.Selection([
        ('draft', 'Brouillon'),
        ('ongoing', 'En cours'),
        ('to_validate', '√Ä Valider'),
        ('validated', 'Valid√©'),
        ('refused', 'Refus√©'),
        ('to_redo', '√Ä Refaire'),
        ('incomplete', 'Inachev√©'),
        ('done', 'Termin√©'),
        ('cancelled', 'Annul√©')
    ], string='√âtat', default='draft', tracking=True)

    work_programm_department_id = fields.Many2one(
        'hr.department',
        string="D√©partement autoris√©",
        help="S√©lectionnez le d√©partement autoris√© pour ce workflow."
    )

    name = fields.Char(string="Reference", required=True, copy=False, readonly=True,
                       default=lambda self: self.env['ir.sequence'].next_by_code('work.program.sequence'))

    week_of = fields.Integer(string='Semaine de', help="Num√©ro de semaine dans l'ann√©e")
    project_id = fields.Many2one('project.project', string='Projet / Programme', ondelete='restrict')
    activity_id = fields.Many2one('workflow.activity', string='Activit√©', ondelete='restrict')
    procedure_id = fields.Many2one('workflow.procedure', string='Type de t√¢che (Proc√©dure)', ondelete='restrict')
    task_description_id = fields.Many2one('workflow.task.formulation', string='Description de la t√¢che',
                                          ondelete='restrict')
    inputs_needed = fields.Text(string='Entr√©es n√©cessaires', help="Entr√©es n√©cessaires pour la t√¢che, si applicable")
    deliverable_ids = fields.Many2many('workflow.deliverable', string='Livrables de la t√¢che')
    priority = fields.Selection([
        ('low', 'Basse'),
        ('medium', 'Moyenne'),
        ('high', 'Haute')
    ], string='Priorit√©', default='medium')
    complexity = fields.Selection([
        ('low', 'Faible'),
        ('medium', 'Moyenne'),
        ('high', '√âlev√©e')
    ], string='Complexit√©', default='medium')
    assignment_date = fields.Date(string='Date d\'assignation', default=lambda self: date.today())
    duration_effort = fields.Float(string='Dur√©e / Effort (heures)', help="Dur√©e estim√©e ou effort en heures")
    initial_deadline = fields.Date(string='Date limite initiale', default=lambda self: date.today())
    nb_postpones = fields.Integer(string='Nombre de reports', default=0)
    actual_deadline = fields.Date(string='Date limite r√©elle')
    # responsible_id = fields.Many2one('hr.employee', string='Responsable', ondelete='restrict')
    responsible_id = fields.Many2one(
        'hr.employee',
        string='Responsable',
        ondelete='restrict',
        default=lambda self: self.env.user.employee_ids[:1] if self.env.user.employee_ids else False
    )
    support_ids = fields.Many2many('hr.employee', string='Support')

    completion_percentage = fields.Float(string='Pourcentage d\'ach√®vement', default=0.0)
    satisfaction_level = fields.Selection([
        ('low', 'Faible'),
        ('medium', 'Moyen'),
        ('high', '√âlev√©')
    ], string='Niveau de satisfaction')
    comments = fields.Text(string='Commentaires / Remarques')
    champ1 = fields.Char(string='Champ 1', help="Champ suppl√©mentaire pour d√©partements externes")
    champ2 = fields.Text(string='Champ 2', help="Champ suppl√©mentaire pour d√©partements externes")

    # Champ calcul√© pour readonly selon le groupe
    state_readonly = fields.Boolean(
        string="Readonly for user",
        compute="_compute_state_readonly"
    )

    @api.depends('state')
    def _compute_state_readonly(self):
        for rec in self:
            # V√©rifie si l'utilisateur est dans les groupes admin/manager
            if self.env.user.has_group('workprogramm.workprogramm_group_manager') \
                    or self.env.user.has_group('workprogramm.workprogramm_group_admin'):
                rec.state_readonly = False
            else:
                rec.state_readonly = True
    # -------------------------------------------------------------------------
    # Gestion des mois et semaines
    # -------------------------------------------------------------------------

    @api.model
    def _get_default_current_month_selection(self):
        """ Retourne la liste des mois pour le champ Selection, en utilisant Odoo pour la traduction. """
        # La cl√© doit √™tre en minuscules et non traduite (fran√ßais par d√©faut ici)
        return [
            ('janvier', _('Janvier')), ('fevrier', _('F√©vrier')), ('mars', _('Mars')),
            ('avril', _('Avril')), ('mai', _('Mai')), ('juin', _('Juin')),
            ('juillet', _('Juillet')), ('aout', _('Ao√ªt')), ('septembre', _('Septembre')),
            ('octobre', _('Octobre')), ('novembre', _('Novembre')), ('decembre', _('D√©cembre')),
        ]

    @api.model
    def _get_default_current_month(self):
        """ D√©finit le mois actuel par d√©faut en utilisant la cl√© stable. """
        # Utilise calendar.month_name (bas√© sur la locale par d√©faut) puis mappe √† une cl√© stable
        current_month_num = datetime.now().month
        english_month_name = calendar.month_name[current_month_num].lower()
        return MONTH_KEYS_MAP.get(english_month_name, 'janvier')

    my_month = fields.Selection(
        selection=_get_default_current_month_selection,
        default=_get_default_current_month,
        string='Mois'
    )

    def _get_default_my_week(self):
        today = date.today()
        current_monday = today - timedelta(days=today.weekday())
        return current_monday.strftime("%Y-%m-%d")

    def _get_week_selection(self):
        my_week = []
        current_year = date.today().year
        january_first = date(current_year, 1, 1)
        # Trouver le lundi de la premi√®re semaine contenant le 1er janvier
        monday_first = january_first - timedelta(days=january_first.weekday())
        for i in range(0, 53):
            week_start = monday_first + timedelta(weeks=i)
            # Arr√™ter si on passe √† l'ann√©e suivante
            if week_start.year > current_year:
                break

            # Utilisation de Odoo _() pour la traduction du nom du mois
            # Remarque: strftime("%B") donne le nom du mois selon la locale du syst√®me Odoo.
            # L'utilisation de _() assure que la traduction est g√©r√©e par Odoo.
            my_month_name = _(week_start.strftime("%B"))
            my_day = week_start.day
            my_label = f"{my_day} - {my_month_name}"
            my_value = week_start.strftime("%Y-%m-%d")
            my_week.append((my_value, my_label))
        return my_week

    my_week_of = fields.Selection(
        selection=_get_week_selection,
        default=_get_default_my_week,
        string="Selection week"
    )

    is_external_department = fields.Boolean(
        string='D√©partement Externe',
        compute='_compute_external_department',
        store=False
    )

    # -------------------------------------------------------------------------
    # WORKFLOW METHODS
    # -------------------------------------------------------------------------

    def action_start(self):
        """ Mettre la t√¢che en cours. """
        self.write({'state': 'ongoing','assignment_date': date.today(),'initial_deadline':date.today()})
        # üîÅ Recharger la vue pour afficher le bouton "Soumettre √† Valider"
        return {
            'type': 'ir.actions.client',
            'tag': 'reload',
        }

    def action_submit_for_validation(self):
        """ Soumettre la t√¢che √† validation. """
        if self.filtered(lambda r: r.state not in ('draft', 'ongoing', 'to_redo', 'incomplete')):
            raise UserError(
                _("Seuls les programmes en Brouillon/En cours/√Ä refaire/Inachev√© peuvent √™tre soumis √† validation."))
        self.write({'state': 'to_validate'})

    def action_validate(self):
        """ Valider la t√¢che. Passe √† l'√©tat 'Valid√©'. """
        if self.filtered(lambda r: r.state != 'to_validate'):
            raise UserError(_("Seuls les programmes '√Ä Valider' peuvent √™tre valid√©s."))
        self.write({'state': 'validated','actual_deadline':date.today()})

    def action_refuse(self):
        """ Refuser la t√¢che. Passe √† l'√©tat 'Refus√©'. """
        if self.filtered(lambda r: r.state != 'to_validate'):
            raise UserError(_("Seuls les programmes '√Ä Valider' peuvent √™tre refus√©s."))
        self.write({'state': 'refused','actual_deadline':date.today()})

    def action_to_redo(self):
        """ Marquer la t√¢che '√Ä refaire'. """
        if self.filtered(lambda r: r.state not in ('validated', 'refused', 'incomplete')):
            raise UserError(_("L'√©tat actuel de la t√¢che ne permet pas de la mettre '√Ä refaire'."))
        self.write({'state': 'to_redo'})

    def action_mark_incomplete(self):
        """ Marquer la t√¢che comme 'Inachev√©e'. """
        if self.filtered(lambda r: r.state in ('validated', 'refused', 'cancelled', 'done')):
            raise UserError(_("Cette action est impossible apr√®s une validation ou un ach√®vement."))
        self.write({'state': 'incomplete'})

    def action_done(self):
        """ Mettre la t√¢che en Termin√©. """
        self.write({'state': 'done','actual_deadline':date.today()})

    def action_cancel(self):
        """ Annuler la t√¢che. """
        self.write({'state': 'cancelled'})

    def action_reset_to_draft(self):
        """ Remettre la t√¢che en brouillon (pour correction). """
        self.write({'state': 'draft'})

    # -------------------------------------------------------------------------
    # CONSTRAINTS AND COMPUTES
    # -------------------------------------------------------------------------

    @api.constrains('completion_percentage')
    def _check_completion_percentage(self):
        for record in self:
            if record.completion_percentage < 0 or record.completion_percentage > 100:
                raise ValidationError("Le pourcentage d'ach√®vement doit √™tre compris entre 0 et 100.")

    @api.depends('work_programm_department_id')
    def _compute_external_department(self):
        """Calcule si le d√©partement est externe pour contr√¥ler la visibilit√© des champs."""
        for record in self:
            # Assumons que le mod√®le hr.department a un champ 'dpt_type'
            is_external = record.work_programm_department_id.dpt_type == 'external' if record.work_programm_department_id else False
            record.is_external_department = is_external

    # -------------------------------------------------------------------------
    # ONCHANGE METHODS (Filtrage en cascade + R√©initialisation des d√©pendances)
    # -------------------------------------------------------------------------

    @api.onchange('project_id')
    def _onchange_project_id(self):
        """
        R√©initialise les champs de workflow (Activit√©, Proc√©dure, T√¢che)
        lorsque le Projet change, et retourne le domaine pour l'Activit√©.

        C'est cette m√©thode qui assure que l'activit√© se vide et se recharge
        avec les valeurs du nouveau projet.
        """
        # 1. R√©initialiser les champs enfants
        self.activity_id = False
        self.procedure_id = False
        self.task_description_id = False
        self.deliverable_ids = [(5, 0, 0)]  # Vider la liste Many2many aussi

        # 2. Retourner le domaine filtr√© pour l'Activit√©.
        if self.project_id:
            return {
                'domain': {
                    # La travers√©e Many2one valid√©e : Activity -> SubProcess -> Process -> Domain (li√©e au Project)
                    'activity_id': [('sub_process_id.process_id.domain_id', '=', self.project_id.id)]
                }
            }
        return {'domain': {'activity_id': []}}

    @api.onchange('activity_id')
    def _onchange_activity_id(self):
        """
        R√©initialise les champs d√©pendants de l'activit√© (Proc√©dure, T√¢che, Livrables).
        """
        # R√©initialisation des champs d√©pendants pour √©viter les incoh√©rences
        self.procedure_id = False
        self.task_description_id = False
        self.deliverable_ids = [(5, 0, 0)]  # Commande Odoo pour vider la liste Many2many

        if self.activity_id:
            return {
                'domain': {
                    'procedure_id': [('activity_id', '=', self.activity_id.id)],
                    'deliverable_ids': [('activity_id', '=', self.activity_id.id)]
                }
            }
        else:
            return {'domain': {'procedure_id': [], 'deliverable_ids': []}}

    @api.onchange('procedure_id')
    def _onchange_procedure_id(self):
        """
        R√©initialise la formulation de t√¢che d√©pendante de la proc√©dure.
        """
        # R√©initialisation des champs d√©pendants
        self.task_description_id = False

        if self.procedure_id:
            return {'domain': {'task_description_id': [('procedure_id', '=', self.procedure_id.id)]}}
        else:
            return {'domain': {'task_description_id': []}}

    # -------------------------------------------------------------------------
    # IMPORT METHOD
    # -------------------------------------------------------------------------

    @api.model
    def import_work_program(self, row):
        try:
            # Note: Le champ 'status' de l'import doit √™tre adapt√© pour les nouvelles valeurs de 'state'
            vals = {
                'name': row.get('Task Description', 'Nouveau programme'),
                # Utilisation des cl√©s stables d√©finies ci-dessus
                'my_month': MONTH_KEYS_MAP.get(row.get('Month', '').lower()) if row.get('Month') else False,
                'week_of': int(row.get('Week of')) if row.get('Week of') else False,
                'inputs_needed': row.get('Inputs needed (If applicable)'),
                'priority': row.get('Priority', 'medium').lower() if row.get('Priority') else 'medium',
                'complexity': row.get('Complexity', 'medium').lower() if row.get('Complexity') else 'medium',
                'assignment_date': row.get('Assignment date'),
                'duration_effort': float(row.get('Duration / Effort (Hrs)')) if row.get(
                    'Duration / Effort (Hrs)') else 0.0,
                'initial_deadline': row.get('Initial Dateline'),
                'nb_postpones': int(row.get('Nb of Postpones')) if row.get('Nb of Postpones') else 0,
                'actual_deadline': row.get('Actual Deadline'),
                # Utilisation de 'state' √† la place de 'status'
                'state': row.get('Status', 'draft').lower() if row.get('Status') else 'draft',
                'completion_percentage': float(row.get('% of completion')) if row.get('% of completion') else 0.0,
                'satisfaction_level': row.get('Satisfaction Level', '').lower() if row.get(
                    'Satisfaction Level') else False,
                'comments': row.get('Comments / Remarques / Problems encountered / Additionals informations'),
                'champ1': row.get('Champ 1', ''),
                'champ2': row.get('Champ 2', '')
            }

            # Gestion des relations Many2one et Many2many (inchang√©e)
            if row.get('Departments'):
                dept = self.env['hr.department'].search([('name', '=', row['Departments'])], limit=1)
                if dept:
                    vals['work_programm_department_id'] = dept.id

            if row.get('Activity'):
                activity = self.env['workflow.activity'].search([('name', '=', row['Activity'])], limit=1)
                if activity:
                    vals['activity_id'] = activity.id

            if row.get('Task Type (Procedure)'):
                procedure = self.env['workflow.procedure'].search([('name', '=', row['Task Type (Procedure)'])],
                                                                  limit=1)
                if procedure:
                    vals['procedure_id'] = procedure.id

            if row.get('Task Description'):
                task_description = self.env['workflow.task.formulation'].search(
                    [('name', '=', row['Task Description'])], limit=1)
                if task_description:
                    vals['task_description_id'] = task_description.id

            if row.get('Task Deliverable(s)'):
                deliverables = [name.strip() for name in row['Task Deliverable(s)'].split(',') if name.strip()]
                deliverable_ids = []
                for deliverable_name in deliverables:
                    deliverable = self.env['workflow.deliverable'].search([('name', '=', deliverable_name)], limit=1)
                    if deliverable:
                        deliverable_ids.append(deliverable.id)
                vals['deliverable_ids'] = [(6, 0, deliverable_ids)]

            if row.get('Responsible'):
                responsible = self.env['hr.employee'].search([('name', '=', row['Responsible'])], limit=1)
                if responsible:
                    vals['responsible_id'] = responsible.id

            if row.get('Support'):
                supports = [name.strip() for name in row['Support'].split(',') if name.strip()]
                support_ids = []
                for support_name in supports:
                    support = self.env['hr.employee'].search([('name', '=', support_name)], limit=1)
                    if support:
                        support_ids.append(support.id)
                vals['support_ids'] = [(6, 0, support_ids)]

            existing_record = self.search([('name', '=', vals['name'])], limit=1)
            if existing_record:
                _logger.info(f"Mise √† jour du programme de travail : {vals['name']}")
                existing_record.write(vals)
                return existing_record
            else:
                _logger.info(f"Cr√©ation d'un nouveau programme de travail : {vals['name']}")
                return self.create(vals)
        except Exception as e:
            _logger.error(f"Erreur lors de l'importation de la ligne du programme de travail : {row}. Erreur : {e}",
                          exc_info=True)
            return self.create({
                'name': f"ERREUR-IMPORT-{vals.get('name', 'UNKNOWN')}",
                'comments': f"√âchec de l'importation : {row}. Erreur : {e}",
                'state': 'cancelled'
            })

    @api.onchange('work_programm_department_id')
    def _onchange_department_id(self):
        """Filtrer les projets selon le type du d√©partement."""
        if self.work_programm_department_id:
            dept_type = self.work_programm_department_id.dpt_type
            return {
                'domain': {
                    'project_id': [('project_type', '=', dept_type)]
                }
            }
        else:
            return {'domain': {'project_id': []}}

    # Ajoutez ce champ pour les couleurs Kanban
    color = fields.Integer('Color Index', default=0)
